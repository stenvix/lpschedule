containers:
  schedule:
    setup:
      - !Ubuntu xenial
      - !UbuntuUniverse
      - !Install [python3,python3-pip,python3-setuptools,libcurl4-openssl-dev,python3-dev,build-essential,libxml2-dev,libxslt-dev,lib32z1-dev,libpq-dev]
      - !Sh 'pip3 install --upgrade setuptools'
      - !Sh 'python3 setup.py install'
    environ:
      DATABASE_URL: postgresql://vagga:vagga@127.0.0.1:5433/test?client_encoding=utf8
      PYTHON_EGG_CACHE: /tmp
      C_FORCE_ROOT: "true"
  database:
    setup:
      - !Ubuntu trusty
      - !Install [postgresql,postgresql-client]
      - !EnsureDir /data
      - !EnsureDir /work/.db/data

    environ:
      PG_PORT: 5433   # Port of host to use
      PG_DB: test
      PG_USER: vagga
      PG_PASSWORD: vagga
      PGDATA: /data
      PG_BIN: /usr/lib/postgresql/9.3/bin
    volumes:
      /data: !BindRW /work/.db/data

commands:
  debug: !Supervise
    description: Run app in debug mode
    children:
      service: !Command
        container: schedule
        run: |
            touch /work/.dbcreation; # Create lock file
            while [ -f /work/.dbcreation ]; do sleep 0.2; done # Acquire lock
            celery multi start worker1 -A schedule.tasks.celery -B -l debug -Ofair --logfile="celery.log";
            python3 manage.py
      db: !Command
        container: database
        run: |
            chown postgres:postgres $PGDATA;
            chmod 0700 $PGDATA;
            if [ -z "$(ls -A $PGDATA)" ]; then
              su postgres -c "$PG_BIN/pg_ctl initdb";
              su postgres -c "echo 'host all all all trust' >> $PGDATA/pg_hba.conf"
              su postgres -c "$PG_BIN/pg_ctl -w -o '-F --port=$PG_PORT -k /tmp' start";
              su postgres -c "$PG_BIN/psql -h 127.0.0.1 -p $PG_PORT -c \"CREATE USER $PG_USER WITH PASSWORD '$PG_PASSWORD';\""
              su postgres -c "$PG_BIN/createdb -h 127.0.0.1 -p $PG_PORT $PG_DB -O $PG_USER";
            else
              su postgres -c "$PG_BIN/pg_ctl -w -o '-F --port=$PG_PORT -k /tmp' start";
            fi
            rm /work/.dbcreation # Release lock
            sleep infinity
  run: !Supervise
    description: Run app on production mode
    children:
      service: !Command
        container: schedule
        run: |
            touch /work/.dbcreation; # Create lock file
            while [ -f /work/.dbcreation ]; do sleep 0.2; done # Acquire lock
            celery multi start worker1 -A schedule.tasks.celery -B -l debug -Ofair --logfile="celery.log";
            python3 app.py
      db: !Command
        container: database
        run: |
            chown postgres:postgres $PGDATA;
            chmod 0700 $PGDATA;
            if [ -z "$(ls -A $PGDATA)" ]; then
              su postgres -c "$PG_BIN/pg_ctl initdb";
              su postgres -c "echo 'host all all all trust' >> $PGDATA/pg_hba.conf"
              su postgres -c "$PG_BIN/pg_ctl -w -o '-F --port=$PG_PORT -k /tmp' start";
              su postgres -c "$PG_BIN/psql -h 127.0.0.1 -p $PG_PORT -c \"CREATE USER $PG_USER WITH PASSWORD '$PG_PASSWORD';\""
              su postgres -c "$PG_BIN/createdb -h 127.0.0.1 -p $PG_PORT $PG_DB -O $PG_USER";
            else
              su postgres -c "$PG_BIN/pg_ctl -w -o '-F --port=$PG_PORT -k /tmp' start";
            fi
            rm /work/.dbcreation # Release lock
            sleep infinity
